const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  PermissionFlagsBits,
  ChannelType,
  MessageFlags,
} = require('discord.js');

const { Confession, GuildSettings, ChannelConfig } = require('./models');
const logger = require('./logger');

// TH√äM M·ªöI: Import cho ch·ª©c nƒÉng idol/fan
const axios = require('axios');
const FormData = require('form-data');

let client;

/**
 * Kh·ªüi t·∫°o bot Discord v√† ƒëƒÉng k√Ω c√°c event listeners
 * @param {Client} discordClient - Discord client instance
 */
async function initializeBot(discordClient) {
  logger.init('Initializing Discord Confession Bot...');
  client = discordClient;

  // Event: Bot ready
  client.once('ready', async () => {
    logger.success(
      `Bot online: ${client.user.tag} | Guilds: ${client.guilds.cache.size}`
    );
    await registerCommands();
  });

  // Event: Interaction created (slash commands, buttons, modals)
  client.on('interactionCreate', async (interaction) => {
    const interactionType = interaction.isChatInputCommand()
      ? 'slash command'
      : interaction.isButton()
      ? 'button'
      : interaction.isModalSubmit()
      ? 'modal'
      : 'unknown';

    logger.user(
      `${interactionType}`,
      interaction.user.tag,
      interaction.guild?.name || 'DM'
    );

    try {
      if (interaction.isChatInputCommand()) {
        await handleSlashCommand(interaction);
      } else if (interaction.isButton()) {
        await handleButtonInteraction(interaction);
      } else if (interaction.isModalSubmit()) {
        await handleModalSubmit(interaction);
      }
    } catch (error) {
      logger.error(`Error handling ${interactionType}:`, error);
      const errorMessage = 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh!';

      try {
        if (interaction.replied || interaction.deferred) {
          await interaction.followUp({
            content: errorMessage,
            flags: MessageFlags.Ephemeral,
          });
        } else {
          await interaction.reply({
            content: errorMessage,
            flags: MessageFlags.Ephemeral,
          });
        }
      } catch (replyError) {
        logger.error(
          `Failed to send error message for ${interactionType}:`,
          replyError
        );
      }
    }
  });

  // TH√äM M·ªöI: Event listener cho tin nh·∫Øn th∆∞·ªùng (cho ch·ª©c nƒÉng idol/fan)
  client.on('messageCreate', async (message) => {
    try {
      await handleRegularMessage(message);
    } catch (error) {
      logger.error('Error handling regular message:', error);
    }
  });
}

/**
 * ƒêƒÉng k√Ω t·∫•t c·∫£ slash commands v·ªõi Discord API
 */
async function registerCommands() {
  const commands = [
    // ===== C√ÅC L·ªÜNH CONFESSION C≈® (GI·ªÆ NGUY√äN) =====
    new SlashCommandBuilder()
      .setName('setup')
      .setDescription('‚öôÔ∏è C·∫•u h√¨nh bot cho server (admin)')
      .addChannelOption((option) =>
        option
          .setName('forum_channel')
          .setDescription(
            'Channel ƒë·ªÉ ƒëƒÉng confession (forum ho·∫∑c text ho·∫∑c voice n·∫øu mu·ªën)'
          )
          .setRequired(true)
          .addChannelTypes(
            ChannelType.GuildText,
            ChannelType.GuildAnnouncement,
            ChannelType.GuildForum,
            ChannelType.GuildVoice
          )
      )
      .addChannelOption((option) =>
        option
          .setName('admin_channel')
          .setDescription('Channel ƒë·ªÉ admin xem confession pending')
          .setRequired(true)
          .addChannelTypes(ChannelType.GuildText)
      )
      .addRoleOption((option) =>
        option
          .setName('admin_role')
          .setDescription('Role admin ƒë·ªÉ qu·∫£n l√Ω confession')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('config')
      .setDescription('üîß Xem c·∫•u h√¨nh bot hi·ªán t·∫°i (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('create-guide')
      .setDescription('üßæ T·∫°o thread h∆∞·ªõng d·∫´n g·ª≠i confession (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('pending')
      .setDescription('üìã Xem danh s√°ch confession ƒëang ch·ªù duy·ªát (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('approved')
      .setDescription('‚úÖ Xem danh s√°ch confession ƒë√£ ƒë∆∞·ª£c duy·ªát (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('all')
      .setDescription('üìú Xem to√†n b·ªô danh s√°ch confession (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('approve')
      .setDescription('‚úÖ Duy·ªát confession b·∫±ng ID (admin)')
      .addIntegerOption((option) =>
        option
          .setName('confession_id')
          .setDescription('ID c·ªßa confession c·∫ßn duy·ªát')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('delete')
      .setDescription('üóëÔ∏è X√≥a confession b·∫±ng ID (admin)')
      .addIntegerOption((option) =>
        option
          .setName('confession_id')
          .setDescription('ID c·ªßa confession c·∫ßn x√≥a')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('detail')
      .setDescription('üîç Xem chi ti·∫øt confession b·∫±ng ID (admin)')
      .addIntegerOption((option) =>
        option
          .setName('confession_id')
          .setDescription('ID c·ªßa confession c·∫ßn xem')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    // ===== C√ÅC L·ªÜNH IDOL/FAN M·ªöI =====
    new SlashCommandBuilder()
      .setName('idol-setup')
      .setDescription('üé≠ C·∫•u h√¨nh idol v√† fan cho k√™nh n√†y')
      .addStringOption((option) =>
        option.setName('idol_name').setDescription('T√™n idol').setRequired(true)
      )
      .addStringOption((option) =>
        option
          .setName('idol_avatar')
          .setDescription('Link avatar idol')
          .setRequired(true)
      )
      .addStringOption((option) =>
        option.setName('fan_name').setDescription('T√™n fan').setRequired(true)
      )
      .addStringOption((option) =>
        option
          .setName('fan_avatar')
          .setDescription('Link avatar fan')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('idol-config')
      .setDescription('üîß Xem c·∫•u h√¨nh idol/fan c·ªßa k√™nh n√†y')
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('idol-remove')
      .setDescription('üóëÔ∏è X√≥a c·∫•u h√¨nh idol/fan kh·ªèi k√™nh n√†y')
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),
  ];

  try {
    await client.application.commands.set(commands);
    logger.success(`Registered ${commands.length} slash commands`);
  } catch (error) {
    logger.error('Failed to register commands:', error);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω slash commands
 */
async function handleSlashCommand(interaction) {
  const { commandName } = interaction;
  const startTime = Date.now();

  switch (commandName) {
    // ===== C√ÅC L·ªÜNH CONFESSION C≈® =====
    case 'setup':
      await handleSetup(interaction);
      break;
    case 'config':
      await handleConfig(interaction);
      break;
    case 'create-guide':
      await handleCreateGuide(interaction);
      break;
    case 'pending':
      await handlePending(interaction);
      break;
    case 'approved':
      await handleApproved(interaction);
      break;
    case 'all':
      await handleAll(interaction);
      break;
    case 'approve':
      await handleApprove(interaction);
      break;
    case 'delete':
      await handleDelete(interaction);
      break;
    case 'detail':
      await handleDetail(interaction);
      break;

    // ===== C√ÅC L·ªÜNH IDOL/FAN M·ªöI =====
    case 'idol-setup':
      await handleIdolSetup(interaction);
      break;
    case 'idol-config':
      await handleIdolConfig(interaction);
      break;
    case 'idol-remove':
      await handleIdolRemove(interaction);
      break;

    default:
      logger.warn(`Unknown command: ${commandName}`);
  }

  logger.timing(commandName, Date.now() - startTime);
}

// ===== T·∫§T C·∫¢ FUNCTIONS CONFESSION C≈® (GI·ªÆ NGUY√äN) =====

/**
 * C·∫•u h√¨nh bot cho server - l∆∞u th√¥ng tin forum channel, admin channel v√† admin role
 */
async function handleSetup(interaction) {
  const forumChannel = interaction.options.getChannel('forum_channel');
  const adminChannel = interaction.options.getChannel('admin_channel');
  const adminRole = interaction.options.getRole('admin_role');

  if (!interaction.guildId) {
    await interaction.reply({
      content:
        '‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server, kh√¥ng th·ªÉ s·ª≠ d·ª•ng trong DM.',
      flags: MessageFlags.Ephemeral,
    });
    return;
  }

  logger.guild(
    'Setting up bot',
    interaction.guild?.name,
    `(${interaction.guildId})`
  );
  logger.config(
    `Channels: Forum=${forumChannel.id}, Admin=${adminChannel.id}, Role=${adminRole.id}`
  );

  try {
    const existingSettings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (existingSettings) {
      logger.config(
        `Updating existing settings for guild ${interaction.guildId}`
      );
      existingSettings.forum_channel_id = forumChannel.id;
      existingSettings.admin_channel_id = adminChannel.id;
      existingSettings.admin_role_id = adminRole.id;
      await existingSettings.save();
    } else {
      logger.config(`Creating new settings for guild ${interaction.guildId}`);
      const newSettings = new GuildSettings({
        guild_id: interaction.guildId,
        forum_channel_id: forumChannel.id,
        admin_channel_id: adminChannel.id,
        admin_role_id: adminRole.id,
      });
      await newSettings.save();
    }

    logger.success(`Setup completed for guild: ${interaction.guild.name}`);
    await interaction.reply({
      content: `‚úÖ ƒê√£ c·∫•u h√¨nh bot th√†nh c√¥ng!\nForum: ${forumChannel}\nAdmin Channel: ${adminChannel}\nAdmin Role: ${adminRole}`,
      flags: MessageFlags.Ephemeral,
    });
  } catch (error) {
    logger.error('Setup failed:', error);

    if (error.code === 11000) {
      logger.error('Duplicate key error details:', {
        keyPattern: error.keyPattern,
        keyValue: error.keyValue,
        collection: error.collection,
      });
      try {
        await interaction.reply({
          content:
            '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin ƒë·ªÉ kh·∫Øc ph·ª•c.',
          flags: MessageFlags.Ephemeral,
        });
      } catch (replyError) {
        logger.error('Failed to send error reply:', replyError);
      }
      return;
    }

    if (error.name === 'MongoError' || error.name === 'MongoServerError') {
      logger.error('MongoDB error during setup:', error);
      try {
        await interaction.reply({
          content: '‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.',
          flags: MessageFlags.Ephemeral,
        });
      } catch (replyError) {
        logger.error('Failed to send MongoDB error reply:', replyError);
      }
      return;
    }

    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      logger.error('Network/Connection error during setup:', error);
      try {
        await interaction.reply({
          content: '‚ùå L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.',
          flags: MessageFlags.Ephemeral,
        });
      } catch (replyError) {
        logger.error('Failed to send network error reply:', replyError);
      }
      return;
    }

    logger.error('Unexpected error during setup:', error);
    try {
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send generic error reply:', replyError);
    }
  }
}

/**
 * Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i c·ªßa server
 */
async function handleConfig(interaction) {
  if (!(await checkAdminPermission(interaction))) return;

  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (!settings) {
      await interaction.reply({
        content:
          '‚ö†Ô∏è Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y s·ª≠ d·ª•ng l·ªánh `/setup` tr∆∞·ªõc.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setTitle('üìã C·∫•u h√¨nh hi·ªán t·∫°i')
      .setColor(0x00ff00)
      .addFields(
        {
          name: 'Forum Channel',
          value: `<#${settings.forum_channel_id}>`,
          inline: false,
        },
        {
          name: 'Admin Channel',
          value: `<#${settings.admin_channel_id}>`,
          inline: false,
        },
        {
          name: 'Admin Role',
          value: `<@&${settings.admin_role_id}>`,
          inline: false,
        }
      );

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } catch (error) {
    logger.error('Failed to get config:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi l·∫•y th√¥ng tin c·∫•u h√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send config error reply:', replyError);
    }
  }
}

/**
 * T·∫°o thread h∆∞·ªõng d·∫´n trong forum channel v·ªõi c√°c n√∫t g·ª≠i confession
 */
async function handleCreateGuide(interaction) {
  if (!(await checkAdminPermission(interaction))) return;

  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (!settings) {
      await interaction.reply({
        content:
          '‚ö†Ô∏è Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y s·ª≠ d·ª•ng l·ªánh `/setup` tr∆∞·ªõc.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const forumChannel = client.channels.cache.get(settings.forum_channel_id);
    if (!forumChannel) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y forum channel!',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setTitle('üìù H∆∞·ªõng d·∫´n g·ª≠i confession')
      .setDescription(
        'Ch·ªçn 1 trong 2 n√∫t d∆∞·ªõi ƒë·ªÉ g·ª≠i confession.\n' +
          'Bot s·∫Ω g·ª≠i tin nh·∫Øn ri√™ng ƒë·ªÉ th√¥ng b√°o khi confession c·ªßa b·∫°n ƒë∆∞·ª£c duy·ªát.\n\n' +
          'üë§ **G·ª≠i hi·ªán t√™n**\n' +
          '‚Ä¢ Hi·ªÉn th·ªã t√™n c·ªßa b·∫°n khi confession ƒë∆∞·ª£c duy·ªát.\n' +
          '‚Ä¢ N·ªôi dung s·∫Ω ƒë∆∞·ª£c duy·ªát v√† ƒëƒÉng c√¥ng khai.\n\n' +
          'üîí **G·ª≠i ·∫©n danh**\n' +
          '‚Ä¢ Kh√¥ng hi·ªÉn th·ªã t√™n c·ªßa b·∫°n.\n' +
          '‚Ä¢ N·ªôi dung s·∫Ω ƒë∆∞·ª£c duy·ªát v√† ƒëƒÉng c√¥ng khai.\n\n' +
          '**L∆∞u √Ω:** T·∫•t c·∫£ confession ƒë·ªÅu c·∫ßn ƒë∆∞·ª£c duy·ªát tr∆∞·ªõc khi hi·ªÉn th·ªã.'
      )
      .setColor(0x0099ff);

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('send_named')
        .setLabel('üë§ G·ª≠i Hi·ªán T√™n')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('send_anonymous')
        .setLabel('üîí G·ª≠i ·∫®n Danh')
        .setStyle(ButtonStyle.Secondary)
    );

    const thread = await forumChannel.threads.create({
      name: 'üíå G·ª¨I CONFESSION T·∫†I ƒê√ÇY! üíå',
      message: {
        content: 'H√£y ƒë·ªçc k·ªπ h∆∞·ªõng d·∫´n tr∆∞·ªõc khi s·ª≠ d·ª•ng.\n\n',
        embeds: [embed],
        components: [row],
      },
    });

    logger.thread('Created guide thread', thread.name);
    await interaction.reply({
      content: '‚úÖ ƒê√£ t·∫°o thread h∆∞·ªõng d·∫´n g·ª≠i confession.',
      flags: MessageFlags.Ephemeral,
    });
  } catch (error) {
    logger.error('Failed to create guide thread:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi t·∫°o thread h∆∞·ªõng d·∫´n. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send guide thread error reply:', replyError);
    }
  }
}

/**
 * X·ª≠ l√Ω c√°c button interactions
 */
async function handleButtonInteraction(interaction) {
  const { customId } = interaction;

  if (customId === 'send_named' || customId === 'send_anonymous') {
    await handleConfessionButtons(interaction);
  } else if (customId.startsWith('anonymous_reply_')) {
    await handleAnonymousReply(interaction);
  } else if (
    customId.startsWith('approve_') ||
    customId.startsWith('reject_')
  ) {
    await handleApprovalButtons(interaction);
  } else if (customId.startsWith('page_')) {
    await handlePaginationButtons(interaction);
  }
}

/**
 * X·ª≠ l√Ω n√∫t g·ª≠i confession - hi·ªÉn th·ªã modal ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p n·ªôi dung
 */
async function handleConfessionButtons(interaction) {
  const isAnonymous = interaction.customId === 'send_anonymous';

  const modal = new ModalBuilder()
    .setCustomId(`confession_modal_${isAnonymous ? 'anon' : 'named'}`)
    .setTitle('G·ª≠i Confession');

  const contentInput = new TextInputBuilder()
    .setCustomId('confession_content')
    .setLabel('N·ªôi dung confession')
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(true)
    .setMaxLength(4000)
    .setPlaceholder('Nh·∫≠p n·ªôi dung confession c·ªßa b·∫°n...');

  const actionRow = new ActionRowBuilder().addComponents(contentInput);
  modal.addComponents(actionRow);

  await interaction.showModal(modal);
}

/**
 * X·ª≠ l√Ω n√∫t B√¨nh lu·∫≠n ·∫©n danh - hi·ªÉn th·ªã modal ƒë·ªÉ nh·∫≠p n·ªôi dung tr·∫£ l·ªùi
 */
async function handleAnonymousReply(interaction) {
  const confessionId = interaction.customId.split('_')[2];

  const modal = new ModalBuilder()
    .setCustomId(`reply_modal_${confessionId}`)
    .setTitle(`B√¨nh lu·∫≠n ·∫©n danh`);

  const contentInput = new TextInputBuilder()
    .setCustomId('reply_content')
    .setLabel('N·ªôi dung b√¨nh lu·∫≠n')
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(true)
    .setMaxLength(2000)
    .setPlaceholder('Nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n c·ªßa b·∫°n...');

  const actionRow = new ActionRowBuilder().addComponents(contentInput);
  modal.addComponents(actionRow);

  await interaction.showModal(modal);
}

/**
 * X·ª≠ l√Ω modal submissions
 */
async function handleModalSubmit(interaction) {
  if (interaction.customId.startsWith('confession_modal_')) {
    await handleConfessionModalSubmit(interaction);
  } else if (interaction.customId.startsWith('reply_modal_')) {
    await handleReplyModalSubmit(interaction);
  }
}

/**
 * X·ª≠ l√Ω submission confession - l∆∞u v√†o database v√† g·ª≠i ƒë·∫øn admin channel
 */
async function handleConfessionModalSubmit(interaction) {
  const isAnonymous = interaction.customId.includes('anon');
  const content = interaction.fields.getTextInputValue('confession_content');

  logger.confession(
    `New submission: ${isAnonymous ? 'Anonymous' : 'Named'}`,
    '',
    `from ${interaction.user.tag}`
  );

  await interaction.deferReply({ flags: MessageFlags.Ephemeral });

  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (!settings) {
      await interaction.followUp({
        content: '‚ö†Ô∏è Server ch∆∞a setup. Admin c·∫ßn ch·∫°y l·ªánh `/setup`.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const lastConfession = await Confession.findOne({
      guild_id: interaction.guildId,
    })
      .sort({ confession_id: -1 })
      .select('confession_id');

    const confessionNumber = lastConfession
      ? lastConfession.confession_id + 1
      : 1;

    const confession = new Confession({
      confession_id: confessionNumber,
      guild_id: interaction.guildId,
      content: content,
      anonymous: isAnonymous,
      user_id: interaction.user.id,
      status: 'pending',
    });

    await confession.save();
    logger.database(`Saved confession #${confessionNumber} to database`);

    const adminChannel = client.channels.cache.get(settings.admin_channel_id);
    if (adminChannel) {
      const embed = new EmbedBuilder()
        .setTitle(`üì• Confession Pending #${confessionNumber}`)
        .setDescription(content)
        .setColor(0xff9900)
        .addFields(
          {
            name: '·∫®n danh',
            value: isAnonymous ? 'C√≥' : 'Kh√¥ng',
            inline: true,
          },
          {
            name: 'Ng∆∞·ªùi g·ª≠i',
            value: isAnonymous ? 'üîí ·∫®n danh' : `<@${interaction.user.id}>`,
            inline: false,
          }
        );

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`approve_${confessionNumber}`)
          .setLabel('Duy·ªát')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId(`reject_${confessionNumber}`)
          .setLabel('T·ª´ ch·ªëi')
          .setStyle(ButtonStyle.Danger)
      );

      await adminChannel.send({
        embeds: [embed],
        components: [row],
      });
    }

    try {
      await interaction.user.send(
        `üì® B·∫°n ƒë√£ g·ª≠i confession #${confessionNumber} th√†nh c√¥ng! ƒêang ch·ªù admin duy·ªát.`
      );
      await interaction.followUp({
        content: `‚úÖ ƒê√£ g·ª≠i confession #${confessionNumber} th√†nh c√¥ng!`,
        flags: MessageFlags.Ephemeral,
      });
    } catch (error) {
      await interaction.followUp({
        content: `‚úÖ ƒê√£ g·ª≠i confession #${confessionNumber} th√†nh c√¥ng! \n\n __B·∫≠t DM ƒë·ªÉ nh·∫≠n th√¥ng b√°o duy·ªát.__`,
        flags: MessageFlags.Ephemeral,
      });
    }
  } catch (error) {
    logger.error('Failed to handle confession submission:', error);
    try {
      await interaction.followUp({
        content: '‚ùå L·ªói khi g·ª≠i confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error(
        'Failed to send confession submission error reply:',
        replyError
      );
    }
  }
}

/**
 * X·ª≠ l√Ω B√¨nh lu·∫≠n ·∫©n danh - g·ª≠i tin nh·∫Øn v√†o thread confession
 */
async function handleReplyModalSubmit(interaction) {
  const confessionId = interaction.customId.split('_')[2];
  const replyContent = interaction.fields.getTextInputValue('reply_content');

  try {
    const confession = await Confession.findOne({
      confession_id: parseInt(confessionId),
      guild_id: interaction.guildId,
      status: 'approved',
    });

    if (!confession || !confession.thread_id) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y confession ho·∫∑c thread kh√¥ng t·ªìn t·∫°i.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const thread = await client.channels.fetch(confession.thread_id);
    if (!thread) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y thread c·ªßa confession.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const replyEmbed = new EmbedBuilder()
      .setDescription(`**G·ª≠i ·∫©n danh t·ªõi t√°c gi·∫£:**\n${replyContent}`)
      .setColor(0x36393f);

    await thread.send({ embeds: [replyEmbed] });
    logger.confession(`Anonymous reply sent`, confessionId);

    await interaction.deferUpdate();
  } catch (error) {
    logger.error('Failed to send anonymous reply:', error);
    await interaction.reply({
      content: '‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i tr·∫£ l·ªùi.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

/**
 * X·ª≠ l√Ω n√∫t duy·ªát/t·ª´ ch·ªëi confession
 */
async function handleApprovalButtons(interaction) {
  await interaction.deferReply({ flags: MessageFlags.Ephemeral });

  if (!(await checkAdminPermission(interaction))) return;

  const [action, confessionId] = interaction.customId.split('_');

  try {
    const confession = await Confession.findOne({
      confession_id: parseInt(confessionId),
      guild_id: interaction.guildId,
    });

    if (!confession) {
      return await interaction.followUp({
        content: '‚ùå Confession kh√¥ng t·ªìn t·∫°i!',
        flags: MessageFlags.Ephemeral,
      });
    }

    if (confession.status !== 'pending') {
      return await interaction.followUp({
        content: '‚ùå Confession n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!',
        flags: MessageFlags.Ephemeral,
      });
    }

    if (action === 'approve') {
      await approveConfession(interaction, confession);
    } else if (action === 'reject') {
      await rejectConfession(interaction, confession);
    }
  } catch (error) {
    logger.error('Error handling approval button:', error);
    await interaction.followUp({
      content: '‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

/**
 * Duy·ªát confession - t·∫°o thread trong forum v√† c·∫≠p nh·∫≠t database
 */
async function approveConfession(interaction, confession) {
  const settings = await GuildSettings.findOne({
    guild_id: interaction.guildId,
  });

  const forumChannel = interaction.client.channels.cache.get(
    settings.forum_channel_id
  );

  if (!forumChannel) {
    return await interaction.followUp({
      content: '‚ùå Kh√¥ng t√¨m th·∫•y forum channel!',
      flags: MessageFlags.Ephemeral,
    });
  }

  const user = await interaction.client.users.fetch(confession.user_id);
  const thread = await createConfessionThread(forumChannel, confession, user);

  const replyRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(`anonymous_reply_${confession.confession_id}`)
      .setLabel('B√¨nh lu·∫≠n ·∫©n danh')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('üí¨')
  );

  await thread.send({
    content: '',
    components: [replyRow],
  });

  confession.status = 'approved';
  confession.thread_id = thread.id;
  await confession.save();

  logger.confession('Approved', confession.confession_id);

  await interaction.followUp({
    content: '‚úÖ ƒê√£ duy·ªát v√† ƒëƒÉng confession l√™n forum.',
    flags: MessageFlags.Ephemeral,
  });

  try {
    await user.send(
      `üì¢ Confession #${confession.confession_id} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin duy·ªát v√† ƒëƒÉng c√¥ng khai.`
    );
  } catch (error) {
    logger.warn('Cannot send DM to user');
  }
}

/**
 * T·ª´ ch·ªëi confession - x√≥a kh·ªèi database
 */
async function rejectConfession(interaction, confession) {
  await Confession.deleteOne({
    confession_id: confession.confession_id,
    guild_id: interaction.guildId,
  });

  logger.confession('Rejected', confession.confession_id);

  await interaction.followUp({
    content: 'üóëÔ∏è Confession ƒë√£ b·ªã t·ª´ ch·ªëi v√† x√≥a kh·ªèi h·ªá th·ªëng.',
    flags: MessageFlags.Ephemeral,
  });

  try {
    const user = await interaction.client.users.fetch(confession.user_id);
    await user.send(
      `‚ùå Confession #${confession.confession_id} c·ªßa b·∫°n ƒë√£ b·ªã admin t·ª´ ch·ªëi.`
    );
  } catch (error) {
    logger.warn('Cannot send DM to user');
  }
}

function findCutPosition(text, maxLength) {
  let cut = text.lastIndexOf('\n', maxLength);
  if (cut >= maxLength * 0.75) return cut;

  cut = text.lastIndexOf('.', maxLength);
  if (cut >= maxLength * 0.75) return cut + 1;

  cut = text.lastIndexOf('!', maxLength);
  if (cut >= maxLength * 0.75) return cut + 1;

  cut = text.lastIndexOf('?', maxLength);
  if (cut >= maxLength * 0.75) return cut + 1;

  cut = text.lastIndexOf(' ', maxLength);
  if (cut > 0) return cut;

  return maxLength;
}

/**
 * T·∫°o thread trong forum cho confession ƒë√£ ƒë∆∞·ª£c duy·ªát
 * X·ª≠ l√Ω c·∫£ confession ng·∫Øn v√† d√†i (>2000 k√Ω t·ª±)
 */
async function createConfessionThread(forumChannel, confession, user) {
  const fullContent = confession.content;
  const suffix = '\n\n*ƒê·ªçc ti·∫øp b√™n d∆∞·ªõi...*';
  const maxLength = 2000;
  const buffer = 50;
  const allowedLength = maxLength - suffix.length - buffer;

  if (fullContent.length <= allowedLength) {
    const creditEmbed = new EmbedBuilder().setColor(0x2b2d31).setFooter({
      text: confession.anonymous
        ? `Confession #${confession.confession_id} ‚Ä¢ ·∫®n danh`
        : `Confession #${confession.confession_id} ‚Ä¢ T·ª´ @${user.username}`,
    });

    return await forumChannel.threads.create({
      name: `Confession #${confession.confession_id}`,
      message: {
        content: fullContent,
        embeds: [creditEmbed],
      },
    });
  }

  const cutPos = findCutPosition(fullContent, allowedLength);
  const firstPart = fullContent.substring(0, cutPos).trim() + suffix;

  const thread = await forumChannel.threads.create({
    name: `Confession #${confession.confession_id}`,
    message: { content: firstPart },
  });

  let remaining = fullContent.substring(cutPos).trim();
  const MAX_CHUNK_SIZE = 2000;

  while (remaining.length > 0) {
    const chunk =
      remaining.length > MAX_CHUNK_SIZE
        ? remaining.substring(0, MAX_CHUNK_SIZE)
        : remaining;

    await thread.send({ content: chunk });
    remaining = remaining.substring(chunk.length);
  }

  const creditEmbed = new EmbedBuilder().setColor(0x2b2d31).setFooter({
    text: confession.anonymous
      ? `Confession #${confession.confession_id} ‚Ä¢ ·∫®n danh`
      : `Confession #${confession.confession_id} ‚Ä¢ T·ª´ @${user.username}`,
  });

  await thread.send({ embeds: [creditEmbed] });
  return thread;
}

/**
 * Ki·ªÉm tra quy·ªÅn admin c·ªßa ng∆∞·ªùi d√πng
 */
async function checkAdminPermission(interaction) {
  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (!settings) {
      await interaction.reply({
        content: '‚ö†Ô∏è Server ch∆∞a setup. Admin c·∫ßn ch·∫°y l·ªánh `/setup`.',
        flags: MessageFlags.Ephemeral,
      });
      return false;
    }

    if (!interaction.member.roles.cache.has(settings.admin_role_id)) {
      await interaction.reply({
        content: '‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.',
        flags: MessageFlags.Ephemeral,
      });
      return false;
    }

    return true;
  } catch (error) {
    logger.error('Error checking admin permission:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói ki·ªÉm tra quy·ªÅn admin. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send admin permission error reply:', replyError);
    }
    return false;
  }
}

// Command handlers
async function handlePending(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  await showConfessionList(interaction, 'pending');
}

async function handleApproved(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  await showConfessionList(interaction, 'approved');
}

async function handleAll(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  await showConfessionList(interaction, null);
}

/**
 * Hi·ªÉn th·ªã danh s√°ch confession v·ªõi ph√¢n trang
 */
async function showConfessionList(interaction, status, page = 0) {
  const perPage = 5;

  try {
    const query = { guild_id: interaction.guildId };
    if (status) query.status = status;

    const confessions = await Confession.find(query)
      .sort({ confession_id: 1 })
      .skip(page * perPage)
      .limit(perPage);

    const totalCount = await Confession.countDocuments(query);
    const totalPages = Math.max(1, Math.ceil(totalCount / perPage));

    let title, color;
    if (status === 'pending') {
      title = 'üìã Confession ƒêang Ch·ªù Duy·ªát';
      color = 0xff9900;
    } else if (status === 'approved') {
      title = '‚úÖ Confession ƒê√£ Duy·ªát';
      color = 0x00ff00;
    } else {
      title = 'üìú T·∫•t C·∫£ Confession';
      color = 0x0099ff;
    }

    const embed = new EmbedBuilder().setTitle(title).setColor(color);

    if (confessions.length === 0) {
      embed.setDescription(
        status === 'pending'
          ? '‚úÖ Kh√¥ng c√≥ confession n√†o ƒëang ch·ªù duy·ªát!'
          : status === 'approved'
          ? 'üì≠ Ch∆∞a c√≥ confession n√†o ƒë∆∞·ª£c duy·ªát!'
          : 'üì≠ Ch∆∞a c√≥ confession n√†o!'
      );
    } else {
      for (const confession of confessions) {
        const statusIcon = confession.status === 'approved' ? '‚úÖ' : '‚è≥';
        const anonymousStatus = confession.anonymous ? 'C√≥' : 'Kh√¥ng';
        const userDisplay = confession.anonymous
          ? 'üîí ·∫®n danh'
          : `<@${confession.user_id}>`;

        const contentPreview =
          confession.content.length > 100
            ? confession.content.substring(0, 100) + '...'
            : confession.content;

        const formattedTime = new Date(confession.timestamp).toLocaleDateString(
          'vi-VN',
          {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
          }
        );

        embed.addFields({
          name: `${statusIcon} Confession #${confession.confession_id}`,
          value: `**·∫®n danh:** ${anonymousStatus}\n**Ng∆∞·ªùi g·ª≠i:** ${userDisplay}\n**Th·ªùi gian:** ${formattedTime}\n**N·ªôi dung:** ${contentPreview}`,
          inline: false,
        });
      }
    }

    embed.setFooter({
      text: `Trang ${page + 1}/${totalPages} ‚Ä¢ T·ªïng: ${totalCount} confession`,
    });

    const statusPrefix = status || 'all';
    const prevPage = Math.max(0, page - 1);
    const nextPage = Math.min(totalPages - 1, page + 1);

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`page_prev_${statusPrefix}_${prevPage}_${Date.now()}`)
        .setLabel('‚óÄÔ∏è Tr∆∞·ªõc')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === 0),
      new ButtonBuilder()
        .setCustomId(`page_next_${statusPrefix}_${nextPage}_${Date.now() + 1}`)
        .setLabel('‚ñ∂Ô∏è Sau')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === totalPages - 1),
      new ButtonBuilder()
        .setCustomId(`page_refresh_${statusPrefix}_${page}_${Date.now() + 2}`)
        .setLabel('üîÑ L√†m m·ªõi')
        .setStyle(ButtonStyle.Primary)
    );

    await interaction.reply({
      embeds: [embed],
      components: [row],
      flags: MessageFlags.Ephemeral,
    });
  } catch (error) {
    logger.error('Error showing confession list:', error);
    try {
      await interaction.reply({
        content:
          '‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send confession list error reply:', replyError);
    }
  }
}

/**
 * X·ª≠ l√Ω n√∫t ph√¢n trang
 */
async function handlePaginationButtons(interaction) {
  const customIdParts = interaction.customId.split('_');
  const action = customIdParts[1];
  const status = customIdParts[2];
  const page = parseInt(customIdParts[3]);

  await interaction.deferUpdate();

  try {
    const perPage = 5;
    const query = { guild_id: interaction.guildId };
    if (status !== 'all') query.status = status;

    const confessions = await Confession.find(query)
      .sort({ confession_id: 1 })
      .skip(page * perPage)
      .limit(perPage);

    const totalCount = await Confession.countDocuments(query);
    const totalPages = Math.max(1, Math.ceil(totalCount / perPage));

    let title, color;
    if (status === 'pending') {
      title = 'üìã Confession ƒêang Ch·ªù Duy·ªát';
      color = 0xff9900;
    } else if (status === 'approved') {
      title = '‚úÖ Confession ƒê√£ Duy·ªát';
      color = 0x00ff00;
    } else {
      title = 'üìú T·∫•t C·∫£ Confession';
      color = 0x0099ff;
    }

    const embed = new EmbedBuilder().setTitle(title).setColor(color);

    if (confessions.length === 0) {
      embed.setDescription(
        status === 'pending'
          ? '‚úÖ Kh√¥ng c√≥ confession n√†o ƒëang ch·ªù duy·ªát!'
          : status === 'approved'
          ? 'üì≠ Ch∆∞a c√≥ confession n√†o ƒë∆∞·ª£c duy·ªát!'
          : 'üì≠ Ch∆∞a c√≥ confession n√†o!'
      );
    } else {
      for (const confession of confessions) {
        const statusIcon = confession.status === 'approved' ? '‚úÖ' : '‚è≥';
        const anonymousStatus = confession.anonymous ? 'C√≥' : 'Kh√¥ng';
        const userTag = `<@${confession.user_id}>`;
        const contentPreview =
          confession.content.length > 100
            ? confession.content.substring(0, 100) + '...'
            : confession.content;

        const formattedTime = new Date(confession.timestamp).toLocaleDateString(
          'vi-VN',
          {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
          }
        );

        embed.addFields({
          name: `${statusIcon} Confession #${confession.confession_id}`,
          value: `**·∫®n danh:** ${anonymousStatus}\n**Ng∆∞·ªùi g·ª≠i:** ${userTag}\n**Th·ªùi gian:** ${formattedTime}\n**N·ªôi dung:** ${contentPreview}`,
          inline: false,
        });
      }
    }

    embed.setFooter({
      text: `Trang ${page + 1}/${totalPages} ‚Ä¢ T·ªïng: ${totalCount} confession`,
    });

    const prevPage = Math.max(0, page - 1);
    const nextPage = Math.min(totalPages - 1, page + 1);

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`page_prev_${status}_${prevPage}_${Date.now()}`)
        .setLabel('‚óÄÔ∏è Tr∆∞·ªõc')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === 0),
      new ButtonBuilder()
        .setCustomId(`page_next_${status}_${nextPage}_${Date.now() + 1}`)
        .setLabel('‚ñ∂Ô∏è Sau')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === totalPages - 1),
      new ButtonBuilder()
        .setCustomId(`page_refresh_${status}_${page}_${Date.now() + 2}`)
        .setLabel('üîÑ L√†m m·ªõi')
        .setStyle(ButtonStyle.Primary)
    );

    await interaction.editReply({ embeds: [embed], components: [row] });
  } catch (error) {
    logger.error('Error handling pagination:', error);
    try {
      await interaction.editReply({
        content: '‚ùå L·ªói khi chuy·ªÉn trang. Vui l√≤ng th·ª≠ l·∫°i sau.',
        components: [],
      });
    } catch (replyError) {
      logger.error('Failed to send pagination error reply:', replyError);
    }
  }
}

/**
 * X·ª≠ l√Ω l·ªánh duy·ªát confession b·∫±ng ID
 */
async function handleApprove(interaction) {
  await interaction.deferReply({ flags: MessageFlags.Ephemeral });
  const confessionId = interaction.options.getInteger('confession_id');

  if (!confessionId || isNaN(confessionId)) {
    return await interaction.followUp({
      content: '‚ùå ID confession kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë ƒë√∫ng.',
      flags: MessageFlags.Ephemeral,
    });
  }

  try {
    const confession = await Confession.findOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });

    if (!confession) {
      return await interaction.followUp({
        content: '‚ùå Confession kh√¥ng t·ªìn t·∫°i!',
        flags: MessageFlags.Ephemeral,
      });
    }

    if (confession.status !== 'pending') {
      return await interaction.followUp({
        content: '‚ùå Confession n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!',
        flags: MessageFlags.Ephemeral,
      });
    }

    await approveConfession(interaction, confession);
  } catch (error) {
    logger.error('Error handling approve command:', error);
    await interaction.followUp({
      content: '‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

/**
 * X·ª≠ l√Ω l·ªánh x√≥a confession b·∫±ng ID
 */
async function handleDelete(interaction) {
  if (!(await checkAdminPermission(interaction))) return;

  const confessionId = interaction.options.getInteger('confession_id');

  try {
    const confession = await Confession.findOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });

    if (!confession) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y confession v·ªõi ID n√†y.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    if (confession.status === 'approved' && confession.thread_id) {
      try {
        const thread = await client.channels.fetch(confession.thread_id);
        if (thread) {
          await thread.delete();
          logger.thread(`Deleted thread for confession`, `#${confessionId}`);
        }
      } catch (error) {
        logger.warn('Thread already deleted or not found');
      }
    }

    await Confession.deleteOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });

    logger.confession('Deleted', confessionId);

    const statusMessage =
      confession.status === 'approved'
        ? `üóëÔ∏è ƒê√£ x√≥a confession #${confessionId} kh·ªèi h·ªá th·ªëng v√† forum!`
        : `üóëÔ∏è ƒê√£ x√≥a confession #${confessionId} kh·ªèi h·ªá th·ªëng!`;

    await interaction.reply({
      content: statusMessage,
      flags: MessageFlags.Ephemeral,
    });

    try {
      const user = await client.users.fetch(confession.user_id);
      await user.send(
        `üóëÔ∏è Confession #${confessionId} c·ªßa b·∫°n ƒë√£ b·ªã admin x√≥a kh·ªèi h·ªá th·ªëng.`
      );
    } catch (error) {
      logger.warn('Cannot send DM to user');
    }
  } catch (error) {
    logger.error('Error handling delete command:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi x√≥a confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send delete error reply:', replyError);
    }
  }
}

/**
 * X·ª≠ l√Ω l·ªánh xem chi ti·∫øt confession b·∫±ng ID
 */
async function handleDetail(interaction) {
  if (!(await checkAdminPermission(interaction))) return;

  const confessionId = interaction.options.getInteger('confession_id');

  try {
    const confession = await Confession.findOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });

    if (!confession) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y confession v·ªõi ID n√†y.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const statusColor = confession.status === 'approved' ? 0x00ff00 : 0xff9900;
    const statusIcon = confession.status === 'approved' ? '‚úÖ' : '‚è≥';

    const embed = new EmbedBuilder()
      .setTitle(
        `${statusIcon} Chi Ti·∫øt Confession #${confession.confession_id}`
      )
      .setDescription(confession.content)
      .setColor(statusColor)
      .addFields(
        {
          name: '·∫®n danh',
          value: confession.anonymous ? 'C√≥' : 'Kh√¥ng',
          inline: true,
        },
        {
          name: 'Tr·∫°ng th√°i',
          value:
            confession.status === 'approved' ? 'ƒê√£ duy·ªát' : 'ƒêang ch·ªù duy·ªát',
          inline: true,
        },
        {
          name: 'Th·ªùi gian g·ª≠i',
          value: new Date(confession.timestamp).toLocaleString('vi-VN'),
          inline: false,
        }
      );

    if (!confession.anonymous) {
      embed.addFields({
        name: 'Ng∆∞·ªùi g·ª≠i',
        value: `<@${confession.user_id}>`,
        inline: true,
      });
    }

    if (confession.status === 'approved' && confession.thread_id) {
      embed.addFields({
        name: 'Thread',
        value: `<#${confession.thread_id}>`,
        inline: false,
      });
    }

    embed.setFooter({
      text: `Guild ID: ${interaction.guildId} | User ID: ${confession.user_id}`,
    });

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } catch (error) {
    logger.error('Error handling detail command:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi l·∫•y chi ti·∫øt confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send detail error reply:', replyError);
    }
  }
}

// ===== C√ÅC FUNCTIONS M·ªöI CHO CH·ª®C NƒÇNG IDOL/FAN =====

/**
 * H√†m helper ƒë·ªÉ l·∫•y config k√™nh
 */
async function getChannelConfig(channelId) {
  try {
    return await ChannelConfig.findOne({ channel_id: channelId });
  } catch (error) {
    logger.error('Error getting channel config:', error);
    return null;
  }
}

/**
 * H√†m helper ƒë·ªÉ set config k√™nh
 */
async function setChannelConfig(
  channelId,
  webhookUrl,
  idolName,
  idolAvatar,
  fanName,
  fanAvatar
) {
  try {
    await ChannelConfig.updateOne(
      { channel_id: channelId },
      {
        $set: {
          webhook_url: webhookUrl,
          idol_name: idolName,
          idol_avatar: idolAvatar,
          fan_name: fanName,
          fan_avatar: fanAvatar,
        },
      },
      { upsert: true }
    );
    return true;
  } catch (error) {
    logger.error('Error setting channel config:', error);
    return false;
  }
}

/**
 * X·ª≠ l√Ω setup idol v√† fan cho k√™nh
 */
async function handleIdolSetup(interaction) {
  const idolName = interaction.options.getString('idol_name');
  const idolAvatar = interaction.options.getString('idol_avatar');
  const fanName = interaction.options.getString('fan_name');
  const fanAvatar = interaction.options.getString('fan_avatar');
  const channel = interaction.channel;

  await interaction.deferReply({ flags: MessageFlags.Ephemeral });

  try {
    // T·∫°o ho·∫∑c l·∫•y webhook cho k√™nh
    let webhook;
    const webhooks = await channel.fetchWebhooks();
    const existingWebhook = webhooks.find((wh) =>
      wh.name.includes('idol_webhook')
    );

    if (existingWebhook) {
      webhook = existingWebhook;
    } else {
      webhook = await channel.createWebhook({
        name: `${idolName}_idol_webhook`,
        reason: 'Setup idol/fan webhook',
      });
    }

    // L∆∞u config v√†o database
    const success = await setChannelConfig(
      channel.id,
      webhook.url,
      idolName,
      idolAvatar,
      fanName,
      fanAvatar
    );

    if (success) {
      logger.config(`Setup idol/fan for channel: ${channel.name}`);
      await interaction.followUp({
        content: `‚úÖ ƒê√£ setup k√™nh \`${channel.name}\` v·ªõi idol **${idolName}** v√† fan **${fanName}**\n\n**C√°ch s·ª≠ d·ª•ng:**\n‚Ä¢ Tin nh·∫Øn th∆∞·ªùng ‚Üí hi·ªÉn th·ªã d∆∞·ªõi t√™n **${idolName}**\n‚Ä¢ \`!fan [n·ªôi dung]\` ‚Üí hi·ªÉn th·ªã d∆∞·ªõi t√™n **${fanName}**`,
        flags: MessageFlags.Ephemeral,
      });
    } else {
      throw new Error('Failed to save config to database');
    }
  } catch (error) {
    logger.error('Error in idol setup:', error);
    await interaction.followUp({
      content: '‚ùå L·ªói khi setup idol/fan. Vui l√≤ng th·ª≠ l·∫°i sau.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

/**
 * Xem c·∫•u h√¨nh idol/fan hi·ªán t·∫°i
 */
async function handleIdolConfig(interaction) {
  const config = await getChannelConfig(interaction.channel.id);

  if (!config) {
    await interaction.reply({
      content:
        '‚ö†Ô∏è K√™nh n√†y ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh idol/fan. S·ª≠ d·ª•ng `/idol-setup` ƒë·ªÉ c·∫•u h√¨nh.',
      flags: MessageFlags.Ephemeral,
    });
    return;
  }

  const embed = new EmbedBuilder()
    .setTitle('üé≠ C·∫•u h√¨nh Idol/Fan')
    .setColor(0x00ff00)
    .addFields(
      { name: 'üåü T√™n Idol', value: config.idol_name, inline: true },
      { name: 'üíñ T√™n Fan', value: config.fan_name, inline: true },
      { name: 'üìç K√™nh', value: `<#${interaction.channel.id}>`, inline: false },
      {
        name: 'üìù C√°ch s·ª≠ d·ª•ng',
        value: `‚Ä¢ Tin nh·∫Øn th∆∞·ªùng ‚Üí hi·ªÉn th·ªã d∆∞·ªõi t√™n **${config.idol_name}**\n‚Ä¢ \`!fan [n·ªôi dung]\` ‚Üí hi·ªÉn th·ªã d∆∞·ªõi t√™n **${config.fan_name}**`,
        inline: false,
      }
    )
    .setThumbnail(config.idol_avatar)
    .setFooter({
      text: 'Bot s·∫Ω t·ª± ƒë·ªông x√≥a tin nh·∫Øn g·ªëc v√† g·ª≠i l·∫°i qua webhook',
    });

  await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
}

/**
 * X√≥a c·∫•u h√¨nh idol/fan
 */
async function handleIdolRemove(interaction) {
  try {
    const result = await ChannelConfig.deleteOne({
      channel_id: interaction.channel.id,
    });

    if (result.deletedCount > 0) {
      await interaction.reply({
        content: 'üóëÔ∏è ƒê√£ x√≥a c·∫•u h√¨nh idol/fan kh·ªèi k√™nh n√†y.',
        flags: MessageFlags.Ephemeral,
      });
    } else {
      await interaction.reply({
        content: '‚ö†Ô∏è K√™nh n√†y kh√¥ng c√≥ c·∫•u h√¨nh idol/fan n√†o.',
        flags: MessageFlags.Ephemeral,
      });
    }
  } catch (error) {
    logger.error('Error removing idol config:', error);
    await interaction.reply({
      content: '‚ùå L·ªói khi x√≥a c·∫•u h√¨nh.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

/**
 * X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng ƒë·ªÉ chuy·ªÉn th√†nh webhook (CH·ª®C NƒÇNG M·ªöI)
 */
/**
 * X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng ƒë·ªÉ chuy·ªÉn th√†nh webhook (ƒê√É S·ª¨A L·ªñI)
 */
/**
 * X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng ƒë·ªÉ chuy·ªÉn th√†nh webhook (S·ª¨A L·ªñI MULTIPLE FILES)
 */
/**
 * X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng ƒë·ªÉ chuy·ªÉn th√†nh webhook (S·ª¨A L·ªñI TIMEOUT)
 */
async function handleRegularMessage(message) {
  // B·ªè qua bot, tin nh·∫Øn slash command, v√† tin nh·∫Øn trong DM
  if (message.author.bot || message.content.startsWith('/') || !message.guild) {
    return;
  }

  const config = await getChannelConfig(message.channel.id);
  if (!config) {
    return;
  }

  let content = message.content;
  let username, avatarUrl;

  if (content.startsWith('!fan ')) {
    username = config.fan_name;
    avatarUrl = config.fan_avatar;
    content = content.substring(5);
  } else {
    username = config.idol_name;
    avatarUrl = config.idol_avatar;
  }

  if (!content.trim() && message.attachments.size === 0) {
    return;
  }

  try {
    // GI·ªöI H·∫†N S·ªê FILE T·ªêI ƒêA
    const MAX_FILES = 10; // Discord limit
    const MAX_FILE_SIZE = 8 * 1024 * 1024; // 8MB per file
    const MAX_TOTAL_SIZE = 25 * 1024 * 1024; // 25MB total

    if (message.attachments.size > MAX_FILES) {
      logger.warn(
        `‚ö†Ô∏è Too many files: ${message.attachments.size}. Max: ${MAX_FILES}`
      );
      return;
    }

    let webhookPayload;
    let requestConfig = {};

    if (message.attachments.size > 0) {
      const formData = new FormData();

      const payload = {
        username: username,
        avatar_url: avatarUrl,
        content: content || '',
      };

      formData.append('payload_json', JSON.stringify(payload));

      let fileIndex = 0;
      let totalSize = 0;
      const attachmentArray = Array.from(message.attachments.values());

      for (const attachment of attachmentArray) {
        try {
          // KI·ªÇM TRA DUNG L∆Ø·ª¢NG FILE
          if (attachment.size > MAX_FILE_SIZE) {
            logger.warn(
              `‚ö†Ô∏è File too large: ${attachment.name} (${attachment.size} bytes). Skipping.`
            );
            continue;
          }

          if (totalSize + attachment.size > MAX_TOTAL_SIZE) {
            logger.warn(
              `‚ö†Ô∏è Total size limit reached. Skipping remaining files.`
            );
            break;
          }

          logger.config(
            `üì• Downloading attachment ${fileIndex}: ${attachment.name} (${attachment.size} bytes)`
          );

          const response = await axios.get(attachment.url, {
            responseType: 'arraybuffer',
            timeout: 30000, // TƒÉng timeout cho download
            maxRedirects: 5,
            maxContentLength: MAX_FILE_SIZE,
          });

          const fieldName = `files[${fileIndex}]`;

          formData.append(fieldName, Buffer.from(response.data), {
            filename: attachment.name,
            contentType: attachment.contentType || 'application/octet-stream',
          });

          totalSize += response.data.byteLength;
          logger.success(
            `‚úÖ Added ${fieldName}: ${attachment.name} (${response.data.byteLength} bytes)`
          );
          fileIndex++;
        } catch (error) {
          logger.error(
            `‚ùå Error with attachment ${attachment.name}:`,
            error.message
          );
          // Ti·∫øp t·ª•c v·ªõi files kh√°c
        }
      }

      if (fileIndex === 0) {
        // Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng, g·ª≠i ch·ªâ text
        webhookPayload = {
          username: username,
          avatar_url: avatarUrl,
          content: content || 'File kh√¥ng th·ªÉ t·∫£i l√™n.',
        };
        requestConfig = {
          headers: { 'Content-Type': 'application/json' },
          timeout: 10000,
        };
      } else {
        logger.config(`üìé Total: ${fileIndex} files, ${totalSize} bytes`);

        webhookPayload = formData;

        // T√çNH TIMEOUT D·ª∞A TR√äN S·ªê FILE V√Ä DUNG L∆Ø·ª¢NG
        const baseTimeout = 15000; // 15s base
        const fileTimeout = fileIndex * 5000; // +5s per file
        const sizeTimeout = Math.ceil(totalSize / (1024 * 1024)) * 3000; // +3s per MB
        const finalTimeout = Math.min(
          baseTimeout + fileTimeout + sizeTimeout,
          120000
        ); // Max 2 minutes

        requestConfig = {
          headers: { ...formData.getHeaders() },
          timeout: finalTimeout,
          maxBodyLength: Infinity,
          maxContentLength: Infinity,
        };

        logger.config(`‚è±Ô∏è Upload timeout: ${finalTimeout}ms`);
      }
    } else {
      // Ch·ªâ c√≥ text
      webhookPayload = {
        username: username,
        avatar_url: avatarUrl,
        content: content,
      };

      requestConfig = {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000,
      };
    }

    // G·ª¨I WEBHOOK
    logger.config(
      `üöÄ Sending webhook as ${username} (${message.attachments.size} files)`
    );

    await axios.post(config.webhook_url, webhookPayload, requestConfig);

    // X√ìA TIN NH·∫ÆN G·ªêC
    await message.delete();
    logger.success(`‚úÖ Success: ${username} in ${message.channel.name}`);
  } catch (error) {
    logger.error('‚ùå Webhook error:', error.message);

    if (error.code === 'ECONNABORTED') {
      logger.error('üïí Request timeout - consider reducing file size or count');
    }

    if (error.response) {
      logger.error('Discord API Response:', {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
      });
    }

    // G·ª¨I TIN NH·∫ÆN L·ªñI V√ÄO K√äNH
    try {
      await message.channel.send({
        content: `‚ö†Ô∏è ${message.author}, kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn qua webhook. L√Ω do: ${error.message}`,
        reply: { messageReference: message.id, failIfNotExists: false },
      });
    } catch (replyError) {
      logger.error('Cannot send error message:', replyError.message);
    }
  }
}

module.exports = { initializeBot };
