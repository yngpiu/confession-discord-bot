const {
  SlashCommandBuilder,
  ChannelType,
  PermissionFlagsBits,
} = require('discord.js');
const logger = require('../logger');

async function registerCommands(client) {
  const commands = [
    new SlashCommandBuilder()
      .setName('setup')
      .setDescription('‚öôÔ∏è C·∫•u h√¨nh bot cho server (admin)')
      .addChannelOption((option) =>
        option
          .setName('forum_channel')
          .setDescription(
            'Channel ƒë·ªÉ ƒëƒÉng confession (forum ho·∫∑c text ho·∫∑c voice n·∫øu mu·ªën)'
          )
          .setRequired(true)
          .addChannelTypes(
            ChannelType.GuildText,
            ChannelType.GuildAnnouncement,
            ChannelType.GuildForum,
            ChannelType.GuildVoice
          )
      )
      .addChannelOption((option) =>
        option
          .setName('admin_channel')
          .setDescription('Channel ƒë·ªÉ admin xem confession pending')
          .setRequired(true)
          .addChannelTypes(ChannelType.GuildText)
      )
      .addRoleOption((option) =>
        option
          .setName('admin_role')
          .setDescription('Role admin ƒë·ªÉ qu·∫£n l√Ω confession')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('config')
      .setDescription('üîß Xem c·∫•u h√¨nh bot hi·ªán t·∫°i (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('create-guide')
      .setDescription('üßæ T·∫°o thread h∆∞·ªõng d·∫´n g·ª≠i confession (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('pending')
      .setDescription('üìã Xem danh s√°ch confession ƒëang ch·ªù duy·ªát (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('approved')
      .setDescription('‚úÖ Xem danh s√°ch confession ƒë√£ ƒë∆∞·ª£c duy·ªát (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('all')
      .setDescription('üìú Xem to√†n b·ªô danh s√°ch confession (admin)')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('approve')
      .setDescription('‚úÖ Duy·ªát confession b·∫±ng ID (admin)')
      .addIntegerOption((option) =>
        option
          .setName('confession_id')
          .setDescription('ID c·ªßa confession c·∫ßn duy·ªát')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('delete')
      .setDescription('üóëÔ∏è X√≥a confession b·∫±ng ID (admin)')
      .addIntegerOption((option) =>
        option
          .setName('confession_id')
          .setDescription('ID c·ªßa confession c·∫ßn x√≥a')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('detail')
      .setDescription('üîç Xem chi ti·∫øt confession b·∫±ng ID (admin)')
      .addIntegerOption((option) =>
        option
          .setName('confession_id')
          .setDescription('ID c·ªßa confession c·∫ßn xem')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    new SlashCommandBuilder()
      .setName('idol-setup')
      .setDescription('üé≠ C·∫•u h√¨nh idol v√† fan cho k√™nh n√†y')
      .addStringOption((option) =>
        option.setName('idol_name').setDescription('T√™n idol').setRequired(true)
      )
      .addStringOption((option) =>
        option
          .setName('idol_avatar')
          .setDescription('Link avatar idol')
          .setRequired(true)
      )
      .addStringOption((option) =>
        option.setName('fan_name').setDescription('T√™n fan').setRequired(true)
      )
      .addStringOption((option) =>
        option
          .setName('fan_avatar')
          .setDescription('Link avatar fan')
          .setRequired(true)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('idol-config')
      .setDescription('üîß Xem c·∫•u h√¨nh idol/fan c·ªßa k√™nh n√†y')
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('idol-remove')
      .setDescription('üóëÔ∏è X√≥a c·∫•u h√¨nh idol/fan kh·ªèi k√™nh n√†y')
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('character-config')
      .setDescription('üé≠ C·∫•u h√¨nh h·ªá th·ªëng multi-character cho k√™nh')
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('character-manage')
      .setDescription('‚öôÔ∏è Qu·∫£n l√Ω nh√¢n v·∫≠t (th√™m/x√≥a/xem danh s√°ch)')
      .addStringOption((option) =>
        option
          .setName('action')
          .setDescription('H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán')
          .setRequired(true)
          .addChoices(
            { name: '‚ûï Th√™m nh√¢n v·∫≠t', value: 'add' },
            { name: 'üìã Xem danh s√°ch', value: 'list' },
            { name: 'üóëÔ∏è X√≥a nh√¢n v·∫≠t', value: 'remove' },
            { name: '‚≠ê ƒê·∫∑t m·∫∑c ƒë·ªãnh', value: 'default' }
          )
      )
      .addStringOption((option) =>
        option
          .setName('name')
          .setDescription('T√™n nh√¢n v·∫≠t (cho add)')
          .setRequired(false)
      )
      .addStringOption((option) =>
        option
          .setName('avatar')
          .setDescription('Avatar nh√¢n v·∫≠t (cho add)')
          .setRequired(false)
      )
      .addStringOption((option) =>
        option
          .setName('id')
          .setDescription('ID nh√¢n v·∫≠t (cho remove/default)')
          .setRequired(false)
      )
      .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

    new SlashCommandBuilder()
      .setName('send')
      .setDescription('üì§ G·ª≠i tin nh·∫Øn d∆∞·ªõi t√™n nh√¢n v·∫≠t')
      .addStringOption((option) =>
        option
          .setName('character')
          .setDescription('Ch·ªçn nh√¢n v·∫≠t')
          .setRequired(true)
          .setAutocomplete(true)
      )
      .addStringOption((option) =>
        option
          .setName('message')
          .setDescription('N·ªôi dung tin nh·∫Øn')
          .setRequired(true)
      )
      .addAttachmentOption((option) =>
        option
          .setName('attachment')
          .setDescription('File ƒë√≠nh k√®m (t√πy ch·ªçn)')
          .setRequired(false)
      ),
  ];

  try {
    await client.application.commands.set(commands);
    logger.success(`Registered ${commands.length} slash commands`);
  } catch (error) {
    logger.error('Failed to register commands:', error);
    throw error;
  }
}

module.exports = { registerCommands };
