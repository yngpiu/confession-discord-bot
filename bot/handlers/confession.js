const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  MessageFlags,
} = require('discord.js');
const { Confession, GuildSettings } = require('../models');
const logger = require('../logger');
const { findCutPosition } = require('../utils/text');

async function handleSetup(interaction) {
  const forumChannel = interaction.options.getChannel('forum_channel');
  const adminChannel = interaction.options.getChannel('admin_channel');
  const adminRole = interaction.options.getRole('admin_role');

  if (!interaction.guildId) {
    await interaction.reply({
      content:
        '‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server, kh√¥ng th·ªÉ s·ª≠ d·ª•ng trong DM.',
      flags: MessageFlags.Ephemeral,
    });
    return;
  }

  logger.guild(
    'Setting up bot',
    interaction.guild?.name,
    `(${interaction.guildId})`
  );
  logger.config(
    `Channels: Forum=${forumChannel.id}, Admin=${adminChannel.id}, Role=${adminRole.id}`
  );

  try {
    const existingSettings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (existingSettings) {
      logger.config(`Updating existing settings for guild ${interaction.guildId}`);
      existingSettings.forum_channel_id = forumChannel.id;
      existingSettings.admin_channel_id = adminChannel.id;
      existingSettings.admin_role_id = adminRole.id;
      await existingSettings.save();
    } else {
      logger.config(`Creating new settings for guild ${interaction.guildId}`);
      const newSettings = new GuildSettings({
        guild_id: interaction.guildId,
        forum_channel_id: forumChannel.id,
        admin_channel_id: adminChannel.id,
        admin_role_id: adminRole.id,
      });
      await newSettings.save();
    }

    logger.success(`Setup completed for guild: ${interaction.guild.name}`);
    await interaction.reply({
      content: `‚úÖ ƒê√£ c·∫•u h√¨nh bot th√†nh c√¥ng!\nForum: ${forumChannel}\nAdmin Channel: ${adminChannel}\nAdmin Role: ${adminRole}`,
      flags: MessageFlags.Ephemeral,
    });
  } catch (error) {
    logger.error('Setup failed:', error);

    if (error.code === 11000) {
      logger.error('Duplicate key error details:', {
        keyPattern: error.keyPattern,
        keyValue: error.keyValue,
        collection: error.collection,
      });
      try {
        await interaction.reply({
          content:
            '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin ƒë·ªÉ kh·∫Øc ph·ª•c.',
          flags: MessageFlags.Ephemeral,
        });
      } catch (replyError) {
        logger.error('Failed to send error reply:', replyError);
      }
      return;
    }

    if (error.name === 'MongoError' || error.name === 'MongoServerError') {
      logger.error('MongoDB error during setup:', error);
      try {
        await interaction.reply({
          content: '‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.',
          flags: MessageFlags.Ephemeral,
        });
      } catch (replyError) {
        logger.error('Failed to send MongoDB error reply:', replyError);
      }
      return;
    }

    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      logger.error('Network/Connection error during setup:', error);
      try {
        await interaction.reply({
          content: '‚ùå L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.',
          flags: MessageFlags.Ephemeral,
        });
      } catch (replyError) {
        logger.error('Failed to send network error reply:', replyError);
      }
      return;
    }

    logger.error('Unexpected error during setup:', error);
    try {
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send generic error reply:', replyError);
    }
  }
}

async function handleConfig(interaction) {
  if (!(await checkAdminPermission(interaction))) return;

  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (!settings) {
      await interaction.reply({
        content:
          '‚ö†Ô∏è Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y s·ª≠ d·ª•ng l·ªánh `/setup` tr∆∞·ªõc.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setTitle('üìã C·∫•u h√¨nh hi·ªán t·∫°i')
      .setColor(0x00ff00)
      .addFields(
        { name: 'Forum Channel', value: `<#${settings.forum_channel_id}>`, inline: false },
        { name: 'Admin Channel', value: `<#${settings.admin_channel_id}>`, inline: false },
        { name: 'Admin Role', value: `<@&${settings.admin_role_id}>`, inline: false }
      );

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } catch (error) {
    logger.error('Failed to get config:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi l·∫•y th√¥ng tin c·∫•u h√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send config error reply:', replyError);
    }
  }
}

async function handleCreateGuide(interaction) {
  if (!(await checkAdminPermission(interaction))) return;

  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });

    if (!settings) {
      await interaction.reply({
        content: '‚ö†Ô∏è Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y s·ª≠ d·ª•ng l·ªánh `/setup` tr∆∞·ªõc.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const forumChannel = interaction.client.channels.cache.get(
      settings.forum_channel_id
    );
    if (!forumChannel) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y forum channel!',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setTitle('üìù H∆∞·ªõng d·∫´n g·ª≠i confession')
      .setDescription(
        'Ch·ªçn 1 trong 2 n√∫t d∆∞·ªõi ƒë·ªÉ g·ª≠i confession.\n' +
          'Bot s·∫Ω g·ª≠i tin nh·∫Øn ri√™ng ƒë·ªÉ th√¥ng b√°o khi confession c·ªßa b·∫°n ƒë∆∞·ª£c duy·ªát.\n\n' +
          'üë§ **G·ª≠i hi·ªán t√™n**\n' +
          '‚Ä¢ Hi·ªÉn th·ªã t√™n c·ªßa b·∫°n khi confession ƒë∆∞·ª£c duy·ªát.\n' +
          '‚Ä¢ N·ªôi dung s·∫Ω ƒë∆∞·ª£c duy·ªát v√† ƒëƒÉng c√¥ng khai.\n\n' +
          'üîí **G·ª≠i ·∫©n danh**\n' +
          '‚Ä¢ Kh√¥ng hi·ªÉn th·ªã t√™n c·ªßa b·∫°n.\n' +
          '‚Ä¢ N·ªôi dung s·∫Ω ƒë∆∞·ª£c duy·ªát v√† ƒëƒÉng c√¥ng khai.\n\n' +
          '**L∆∞u √Ω:** T·∫•t c·∫£ confession ƒë·ªÅu c·∫ßn ƒë∆∞·ª£c duy·ªát tr∆∞·ªõc khi hi·ªÉn th·ªã.'
      )
      .setColor(0x0099ff);

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('send_named')
        .setLabel('üë§ G·ª≠i Hi·ªán T√™n')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('send_anonymous')
        .setLabel('üîí G·ª≠i ·∫®n Danh')
        .setStyle(ButtonStyle.Secondary)
    );

    const thread = await forumChannel.threads.create({
      name: 'üíå G·ª¨I CONFESSION T·∫†I ƒê√ÇY! üíå',
      message: {
        content: 'H√£y ƒë·ªçc k·ªπ h∆∞·ªõng d·∫´n tr∆∞·ªõc khi s·ª≠ d·ª•ng.\n\n',
        embeds: [embed],
        components: [row],
      },
    });

    logger.thread('Created guide thread', thread.name);
    await interaction.reply({
      content: '‚úÖ ƒê√£ t·∫°o thread h∆∞·ªõng d·∫´n g·ª≠i confession.',
      flags: MessageFlags.Ephemeral,
    });
  } catch (error) {
    logger.error('Failed to create guide thread:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi t·∫°o thread h∆∞·ªõng d·∫´n. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send guide thread error reply:', replyError);
    }
  }
}

async function handleButtonInteraction(interaction) {
  const { customId } = interaction;
  if (customId === 'send_named' || customId === 'send_anonymous') {
    await handleConfessionButtons(interaction);
  } else if (customId.startsWith('anonymous_reply_')) {
    await handleAnonymousReply(interaction);
  } else if (customId.startsWith('approve_') || customId.startsWith('reject_')) {
    await handleApprovalButtons(interaction);
  } else if (customId.startsWith('page_')) {
    await handlePaginationButtons(interaction);
  }
}

async function handleConfessionButtons(interaction) {
  const isAnonymous = interaction.customId === 'send_anonymous';
  const modal = new ModalBuilder()
    .setCustomId(`confession_modal_${isAnonymous ? 'anon' : 'named'}`)
    .setTitle('G·ª≠i Confession');

  const contentInput = new TextInputBuilder()
    .setCustomId('confession_content')
    .setLabel('N·ªôi dung confession')
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(true)
    .setMaxLength(4000)
    .setPlaceholder('Nh·∫≠p n·ªôi dung confession c·ªßa b·∫°n...');

  const actionRow = new ActionRowBuilder().addComponents(contentInput);
  modal.addComponents(actionRow);
  await interaction.showModal(modal);
}

async function handleAnonymousReply(interaction) {
  const confessionId = interaction.customId.split('_')[2];
  const modal = new ModalBuilder()
    .setCustomId(`reply_modal_${confessionId}`)
    .setTitle(`B√¨nh lu·∫≠n ·∫©n danh`);

  const contentInput = new TextInputBuilder()
    .setCustomId('reply_content')
    .setLabel('N·ªôi dung b√¨nh lu·∫≠n')
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(true)
    .setMaxLength(2000)
    .setPlaceholder('Nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n c·ªßa b·∫°n...');

  const actionRow = new ActionRowBuilder().addComponents(contentInput);
  modal.addComponents(actionRow);
  await interaction.showModal(modal);
}

async function handleModalSubmit(interaction) {
  if (interaction.customId.startsWith('confession_modal_')) {
    await handleConfessionModalSubmit(interaction);
  } else if (interaction.customId.startsWith('reply_modal_')) {
    await handleReplyModalSubmit(interaction);
  }
}

async function handleConfessionModalSubmit(interaction) {
  const isAnonymous = interaction.customId.includes('anon');
  const content = interaction.fields.getTextInputValue('confession_content');

  logger.confession(
    `New submission: ${isAnonymous ? 'Anonymous' : 'Named'}`,
    '',
    `from ${interaction.user.tag}`
  );

  await interaction.deferReply({ flags: MessageFlags.Ephemeral });

  try {
    const settings = await GuildSettings.findOne({ guild_id: interaction.guildId });
    if (!settings) {
      await interaction.followUp({
        content: '‚ö†Ô∏è Server ch∆∞a setup. Admin c·∫ßn ch·∫°y l·ªánh `/setup`.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const lastConfession = await Confession.findOne({ guild_id: interaction.guildId })
      .sort({ confession_id: -1 })
      .select('confession_id');

    const confessionNumber = lastConfession ? lastConfession.confession_id + 1 : 1;

    const confession = new Confession({
      confession_id: confessionNumber,
      guild_id: interaction.guildId,
      content: content,
      anonymous: isAnonymous,
      user_id: interaction.user.id,
      status: 'pending',
    });

    await confession.save();
    logger.database(`Saved confession #${confessionNumber} to database`);

    const adminChannel = interaction.client.channels.cache.get(
      settings.admin_channel_id
    );
    if (adminChannel) {
      const embed = new EmbedBuilder()
        .setTitle(`üì• Confession Pending #${confessionNumber}`)
        .setDescription(content)
        .setColor(0xff9900)
        .addFields(
          { name: '·∫®n danh', value: isAnonymous ? 'C√≥' : 'Kh√¥ng', inline: true },
          {
            name: 'Ng∆∞·ªùi g·ª≠i',
            value: isAnonymous ? 'üîí ·∫®n danh' : `<@${interaction.user.id}>`,
            inline: false,
          }
        );

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId(`approve_${confessionNumber}`).setLabel('Duy·ªát').setStyle(ButtonStyle.Success),
        new ButtonBuilder().setCustomId(`reject_${confessionNumber}`).setLabel('T·ª´ ch·ªëi').setStyle(ButtonStyle.Danger)
      );

      await adminChannel.send({ embeds: [embed], components: [row] });
    }

    try {
      await interaction.user.send(
        `üì® B·∫°n ƒë√£ g·ª≠i confession #${confessionNumber} th√†nh c√¥ng! ƒêang ch·ªù admin duy·ªát.`
      );
      await interaction.followUp({
        content: `‚úÖ ƒê√£ g·ª≠i confession #${confessionNumber} th√†nh c√¥ng!`,
        flags: MessageFlags.Ephemeral,
      });
    } catch (error) {
      await interaction.followUp({
        content:
          `‚úÖ ƒê√£ g·ª≠i confession #${confessionNumber} th√†nh c√¥ng! \n\n __B·∫≠t DM ƒë·ªÉ nh·∫≠n th√¥ng b√°o duy·ªát.__`,
        flags: MessageFlags.Ephemeral,
      });
    }
  } catch (error) {
    logger.error('Failed to handle confession submission:', error);
    try {
      await interaction.followUp({
        content: '‚ùå L·ªói khi g·ª≠i confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send confession submission error reply:', replyError);
    }
  }
}

async function handleReplyModalSubmit(interaction) {
  const confessionId = interaction.customId.split('_')[2];
  const replyContent = interaction.fields.getTextInputValue('reply_content');
  try {
    const confession = await Confession.findOne({
      confession_id: parseInt(confessionId),
      guild_id: interaction.guildId,
      status: 'approved',
    });

    if (!confession || !confession.thread_id) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y confession ho·∫∑c thread kh√¥ng t·ªìn t·∫°i.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const thread = await interaction.client.channels.fetch(confession.thread_id);
    if (!thread) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y thread c·ªßa confession.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const replyEmbed = new EmbedBuilder()
      .setDescription(`**G·ª≠i ·∫©n danh t·ªõi t√°c gi·∫£:**\n${replyContent}`)
      .setColor(0x36393f);

    await thread.send({ embeds: [replyEmbed] });
    logger.confession(`Anonymous reply sent`, confessionId);
    await interaction.deferUpdate();
  } catch (error) {
    logger.error('Failed to send anonymous reply:', error);
    await interaction.reply({
      content: '‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i tr·∫£ l·ªùi.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

async function handleApprovalButtons(interaction) {
  await interaction.deferReply({ flags: MessageFlags.Ephemeral });
  if (!(await checkAdminPermission(interaction))) return;
  const [action, confessionId] = interaction.customId.split('_');

  try {
    const confession = await Confession.findOne({
      confession_id: parseInt(confessionId),
      guild_id: interaction.guildId,
    });
    if (!confession) {
      return await interaction.followUp({
        content: '‚ùå Confession kh√¥ng t·ªìn t·∫°i!',
        flags: MessageFlags.Ephemeral,
      });
    }
    if (confession.status !== 'pending') {
      return await interaction.followUp({
        content: '‚ùå Confession n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!',
        flags: MessageFlags.Ephemeral,
      });
    }
    if (action === 'approve') {
      await approveConfession(interaction, confession);
    } else if (action === 'reject') {
      await rejectConfession(interaction, confession);
    }
  } catch (error) {
    logger.error('Error handling approval button:', error);
    await interaction.followUp({
      content: '‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

async function approveConfession(interaction, confession) {
  const settings = await GuildSettings.findOne({ guild_id: interaction.guildId });
  const forumChannel = interaction.client.channels.cache.get(
    settings.forum_channel_id
  );
  if (!forumChannel) {
    return await interaction.followUp({
      content: '‚ùå Kh√¥ng t√¨m th·∫•y forum channel!',
      flags: MessageFlags.Ephemeral,
    });
  }
  const user = await interaction.client.users.fetch(confession.user_id);
  const thread = await createConfessionThread(forumChannel, confession, user);

  const replyRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(`anonymous_reply_${confession.confession_id}`)
      .setLabel('B√¨nh lu·∫≠n ·∫©n danh')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('üí¨')
  );

  await thread.send({ content: '', components: [replyRow] });

  confession.status = 'approved';
  confession.thread_id = thread.id;
  await confession.save();

  logger.confession('Approved', confession.confession_id);
  await interaction.followUp({
    content: '‚úÖ ƒê√£ duy·ªát v√† ƒëƒÉng confession l√™n forum.',
    flags: MessageFlags.Ephemeral,
  });

  try {
    await user.send(
      `üì¢ Confession #${confession.confession_id} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin duy·ªát v√† ƒëƒÉng c√¥ng khai.`
    );
  } catch (error) {
    logger.warn('Cannot send DM to user');
  }
}

async function rejectConfession(interaction, confession) {
  await Confession.deleteOne({
    confession_id: confession.confession_id,
    guild_id: interaction.guildId,
  });

  logger.confession('Rejected', confession.confession_id);
  await interaction.followUp({
    content: 'üóëÔ∏è Confession ƒë√£ b·ªã t·ª´ ch·ªëi v√† x√≥a kh·ªèi h·ªá th·ªëng.',
    flags: MessageFlags.Ephemeral,
  });

  try {
    const user = await interaction.client.users.fetch(confession.user_id);
    await user.send(
      `‚ùå Confession #${confession.confession_id} c·ªßa b·∫°n ƒë√£ b·ªã admin t·ª´ ch·ªëi.`
    );
  } catch (error) {
    logger.warn('Cannot send DM to user');
  }
}

async function createConfessionThread(forumChannel, confession, user) {
  const fullContent = confession.content;
  const suffix = '\n\n*ƒê·ªçc ti·∫øp b√™n d∆∞·ªõi...*';
  const maxLength = 2000;
  const buffer = 50;
  const allowedLength = maxLength - suffix.length - buffer;

  if (fullContent.length <= allowedLength) {
    const creditEmbed = new EmbedBuilder().setColor(0x2b2d31).setFooter({
      text: confession.anonymous
        ? `Confession #${confession.confession_id} ‚Ä¢ ·∫®n danh`
        : `Confession #${confession.confession_id} ‚Ä¢ T·ª´ @${user.username}`,
    });

    return await forumChannel.threads.create({
      name: `Confession #${confession.confession_id}`,
      message: { content: fullContent, embeds: [creditEmbed] },
    });
  }

  const cutPos = findCutPosition(fullContent, allowedLength);
  const firstPart = fullContent.substring(0, cutPos).trim() + suffix;

  const thread = await forumChannel.threads.create({
    name: `Confession #${confession.confession_id}`,
    message: { content: firstPart },
  });

  let remaining = fullContent.substring(cutPos).trim();
  const MAX_CHUNK_SIZE = 2000;
  while (remaining.length > 0) {
    const chunk =
      remaining.length > MAX_CHUNK_SIZE
        ? remaining.substring(0, MAX_CHUNK_SIZE)
        : remaining;
    await thread.send({ content: chunk });
    remaining = remaining.substring(chunk.length);
  }

  const creditEmbed = new EmbedBuilder().setColor(0x2b2d31).setFooter({
    text: confession.anonymous
      ? `Confession #${confession.confession_id} ‚Ä¢ ·∫®n danh`
      : `Confession #${confession.confession_id} ‚Ä¢ T·ª´ @${user.username}`,
  });
  await thread.send({ embeds: [creditEmbed] });
  return thread;
}

async function checkAdminPermission(interaction) {
  try {
    const settings = await GuildSettings.findOne({
      guild_id: interaction.guildId,
    });
    if (!settings) {
      await interaction.reply({
        content: '‚ö†Ô∏è Server ch∆∞a setup. Admin c·∫ßn ch·∫°y l·ªánh `/setup`.',
        flags: MessageFlags.Ephemeral,
      });
      return false;
    }
    if (!interaction.member.roles.cache.has(settings.admin_role_id)) {
      await interaction.reply({
        content: '‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.',
        flags: MessageFlags.Ephemeral,
      });
      return false;
    }
    return true;
  } catch (error) {
    logger.error('Error checking admin permission:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói ki·ªÉm tra quy·ªÅn admin. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send admin permission error reply:', replyError);
    }
    return false;
  }
}

async function handlePending(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  await showConfessionList(interaction, 'pending');
}

async function handleApproved(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  await showConfessionList(interaction, 'approved');
}

async function handleAll(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  await showConfessionList(interaction, null);
}

async function showConfessionList(interaction, status, page = 0) {
  const perPage = 5;
  try {
    const query = { guild_id: interaction.guildId };
    if (status) query.status = status;
    const confessions = await Confession.find(query)
      .sort({ confession_id: 1 })
      .skip(page * perPage)
      .limit(perPage);

    const totalCount = await Confession.countDocuments(query);
    const totalPages = Math.max(1, Math.ceil(totalCount / perPage));

    let title, color;
    if (status === 'pending') {
      title = 'üìã Confession ƒêang Ch·ªù Duy·ªát';
      color = 0xff9900;
    } else if (status === 'approved') {
      title = '‚úÖ Confession ƒê√£ Duy·ªát';
      color = 0x00ff00;
    } else {
      title = 'üìú T·∫•t C·∫£ Confession';
      color = 0x0099ff;
    }

    const embed = new EmbedBuilder().setTitle(title).setColor(color);
    if (confessions.length === 0) {
      embed.setDescription(
        status === 'pending'
          ? '‚úÖ Kh√¥ng c√≥ confession n√†o ƒëang ch·ªù duy·ªát!'
          : status === 'approved'
          ? 'üì≠ Ch∆∞a c√≥ confession n√†o ƒë∆∞·ª£c duy·ªát!'
          : 'üì≠ Ch∆∞a c√≥ confession n√†o!'
      );
    } else {
      for (const confession of confessions) {
        const statusIcon = confession.status === 'approved' ? '‚úÖ' : '‚è≥';
        const anonymousStatus = confession.anonymous ? 'C√≥' : 'Kh√¥ng';
        const userDisplay = confession.anonymous ? 'üîí ·∫®n danh' : `<@${confession.user_id}>`;
        const contentPreview =
          confession.content.length > 100
            ? confession.content.substring(0, 100) + '...'
            : confession.content;
        const formattedTime = new Date(confession.timestamp).toLocaleDateString('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        });
        embed.addFields({
          name: `${statusIcon} Confession #${confession.confession_id}`,
          value: `**·∫®n danh:** ${anonymousStatus}\n**Ng∆∞·ªùi g·ª≠i:** ${userDisplay}\n**Th·ªùi gian:** ${formattedTime}\n**N·ªôi dung:** ${contentPreview}`,
          inline: false,
        });
      }
    }

    embed.setFooter({
      text: `Trang ${page + 1}/${totalPages} ‚Ä¢ T·ªïng: ${totalCount} confession`,
    });

    const statusPrefix = status || 'all';
    const prevPage = Math.max(0, page - 1);
    const nextPage = Math.min(totalPages - 1, page + 1);
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`page_prev_${statusPrefix}_${prevPage}_${Date.now()}`)
        .setLabel('‚óÄÔ∏è Tr∆∞·ªõc')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === 0),
      new ButtonBuilder()
        .setCustomId(`page_next_${statusPrefix}_${nextPage}_${Date.now() + 1}`)
        .setLabel('‚ñ∂Ô∏è Sau')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === totalPages - 1),
      new ButtonBuilder()
        .setCustomId(`page_refresh_${statusPrefix}_${page}_${Date.now() + 2}`)
        .setLabel('üîÑ L√†m m·ªõi')
        .setStyle(ButtonStyle.Primary)
    );

    await interaction.reply({ embeds: [embed], components: [row], flags: MessageFlags.Ephemeral });
  } catch (error) {
    logger.error('Error showing confession list:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send confession list error reply:', replyError);
    }
  }
}

async function handlePaginationButtons(interaction) {
  const customIdParts = interaction.customId.split('_');
  const status = customIdParts[2];
  const page = parseInt(customIdParts[3]);
  await interaction.deferUpdate();
  try {
    const perPage = 5;
    const query = { guild_id: interaction.guildId };
    if (status !== 'all') query.status = status;
    const confessions = await Confession.find(query)
      .sort({ confession_id: 1 })
      .skip(page * perPage)
      .limit(perPage);
    const totalCount = await Confession.countDocuments(query);
    const totalPages = Math.max(1, Math.ceil(totalCount / perPage));

    let title, color;
    if (status === 'pending') {
      title = 'üìã Confession ƒêang Ch·ªù Duy·ªát';
      color = 0xff9900;
    } else if (status === 'approved') {
      title = '‚úÖ Confession ƒê√£ Duy·ªát';
      color = 0x00ff00;
    } else {
      title = 'üìú T·∫•t C·∫£ Confession';
      color = 0x0099ff;
    }

    const embed = new EmbedBuilder().setTitle(title).setColor(color);
    if (confessions.length === 0) {
      embed.setDescription(
        status === 'pending'
          ? '‚úÖ Kh√¥ng c√≥ confession n√†o ƒëang ch·ªù duy·ªát!'
          : status === 'approved'
          ? 'üì≠ Ch∆∞a c√≥ confession n√†o ƒë∆∞·ª£c duy·ªát!'
          : 'üì≠ Ch∆∞a c√≥ confession n√†o!'
      );
    } else {
      for (const confession of confessions) {
        const statusIcon = confession.status === 'approved' ? '‚úÖ' : '‚è≥';
        const anonymousStatus = confession.anonymous ? 'C√≥' : 'Kh√¥ng';
        const userTag = `<@${confession.user_id}>`;
        const contentPreview =
          confession.content.length > 100
            ? confession.content.substring(0, 100) + '...'
            : confession.content;
        const formattedTime = new Date(confession.timestamp).toLocaleDateString('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        });
        embed.addFields({
          name: `${statusIcon} Confession #${confession.confession_id}`,
          value: `**·∫®n danh:** ${anonymousStatus}\n**Ng∆∞·ªùi g·ª≠i:** ${userTag}\n**Th·ªùi gian:** ${formattedTime}\n**N·ªôi dung:** ${contentPreview}`,
          inline: false,
        });
      }
    }

    embed.setFooter({ text: `Trang ${page + 1}/${totalPages} ‚Ä¢ T·ªïng: ${totalCount} confession` });

    const prevPage = Math.max(0, page - 1);
    const nextPage = Math.min(totalPages - 1, page + 1);
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`page_prev_${status}_${prevPage}_${Date.now()}`)
        .setLabel('‚óÄÔ∏è Tr∆∞·ªõc')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === 0),
      new ButtonBuilder()
        .setCustomId(`page_next_${status}_${nextPage}_${Date.now() + 1}`)
        .setLabel('‚ñ∂Ô∏è Sau')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === totalPages - 1),
      new ButtonBuilder()
        .setCustomId(`page_refresh_${status}_${page}_${Date.now() + 2}`)
        .setLabel('üîÑ L√†m m·ªõi')
        .setStyle(ButtonStyle.Primary)
    );

    await interaction.editReply({ embeds: [embed], components: [row] });
  } catch (error) {
    logger.error('Error handling pagination:', error);
    try {
      await interaction.editReply({
        content: '‚ùå L·ªói khi chuy·ªÉn trang. Vui l√≤ng th·ª≠ l·∫°i sau.',
        components: [],
      });
    } catch (replyError) {
      logger.error('Failed to send pagination error reply:', replyError);
    }
  }
}

async function handleApprove(interaction) {
  await interaction.deferReply({ flags: MessageFlags.Ephemeral });
  const confessionId = interaction.options.getInteger('confession_id');
  if (!confessionId || isNaN(confessionId)) {
    return await interaction.followUp({
      content: '‚ùå ID confession kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë ƒë√∫ng.',
      flags: MessageFlags.Ephemeral,
    });
  }
  try {
    const confession = await Confession.findOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });
    if (!confession) {
      return await interaction.followUp({
        content: '‚ùå Confession kh√¥ng t·ªìn t·∫°i!',
        flags: MessageFlags.Ephemeral,
      });
    }
    if (confession.status !== 'pending') {
      return await interaction.followUp({
        content: '‚ùå Confession n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!',
        flags: MessageFlags.Ephemeral,
      });
    }
    await approveConfession(interaction, confession);
  } catch (error) {
    logger.error('Error handling approve command:', error);
    await interaction.followUp({
      content: '‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.',
      flags: MessageFlags.Ephemeral,
    });
  }
}

async function handleDelete(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  const confessionId = interaction.options.getInteger('confession_id');
  try {
    const confession = await Confession.findOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });
    if (!confession) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y confession v·ªõi ID n√†y.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }
    if (confession.status === 'approved' && confession.thread_id) {
      try {
        const thread = await interaction.client.channels.fetch(
          confession.thread_id
        );
        if (thread) {
          await thread.delete();
          logger.thread(`Deleted thread for confession`, `#${confessionId}`);
        }
      } catch (error) {
        logger.warn('Thread already deleted or not found');
      }
    }
    await Confession.deleteOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });
    logger.confession('Deleted', confessionId);
    const statusMessage =
      confession.status === 'approved'
        ? `üóëÔ∏è ƒê√£ x√≥a confession #${confessionId} kh·ªèi h·ªá th·ªëng v√† forum!`
        : `üóëÔ∏è ƒê√£ x√≥a confession #${confessionId} kh·ªèi h·ªá th·ªëng!`;
    await interaction.reply({ content: statusMessage, flags: MessageFlags.Ephemeral });
    try {
      const user = await interaction.client.users.fetch(confession.user_id);
      await user.send(
        `üóëÔ∏è Confession #${confessionId} c·ªßa b·∫°n ƒë√£ b·ªã admin x√≥a kh·ªèi h·ªá th·ªëng.`
      );
    } catch (error) {
      logger.warn('Cannot send DM to user');
    }
  } catch (error) {
    logger.error('Error handling delete command:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi x√≥a confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send delete error reply:', replyError);
    }
  }
}

async function handleDetail(interaction) {
  if (!(await checkAdminPermission(interaction))) return;
  const confessionId = interaction.options.getInteger('confession_id');
  try {
    const confession = await Confession.findOne({
      confession_id: confessionId,
      guild_id: interaction.guildId,
    });
    if (!confession) {
      await interaction.reply({
        content: '‚ùå Kh√¥ng t√¨m th·∫•y confession v·ªõi ID n√†y.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }
    const statusColor = confession.status === 'approved' ? 0x00ff00 : 0xff9900;
    const statusIcon = confession.status === 'approved' ? '‚úÖ' : '‚è≥';
    const embed = new EmbedBuilder()
      .setTitle(`${statusIcon} Chi Ti·∫øt Confession #${confession.confession_id}`)
      .setDescription(confession.content)
      .setColor(statusColor)
      .addFields(
        { name: '·∫®n danh', value: confession.anonymous ? 'C√≥' : 'Kh√¥ng', inline: true },
        {
          name: 'Tr·∫°ng th√°i',
          value: confession.status === 'approved' ? 'ƒê√£ duy·ªát' : 'ƒêang ch·ªù duy·ªát',
          inline: true,
        },
        { name: 'Th·ªùi gian g·ª≠i', value: new Date(confession.timestamp).toLocaleString('vi-VN'), inline: false }
      );
    if (!confession.anonymous) {
      embed.addFields({ name: 'Ng∆∞·ªùi g·ª≠i', value: `<@${confession.user_id}>`, inline: true });
    }
    if (confession.status === 'approved' && confession.thread_id) {
      embed.addFields({ name: 'Thread', value: `<#${confession.thread_id}>`, inline: false });
    }
    embed.setFooter({ text: `Guild ID: ${interaction.guildId} | User ID: ${confession.user_id}` });
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } catch (error) {
    logger.error('Error handling detail command:', error);
    try {
      await interaction.reply({
        content: '‚ùå L·ªói khi l·∫•y chi ti·∫øt confession. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral,
      });
    } catch (replyError) {
      logger.error('Failed to send detail error reply:', replyError);
    }
  }
}

module.exports = {
  handleSetup,
  handleConfig,
  handleCreateGuide,
  handleButtonInteraction,
  handleModalSubmit,
  handleConfessionModalSubmit,
  handleReplyModalSubmit,
  handleApprovalButtons,
  handlePending,
  handleApproved,
  handleAll,
  handlePaginationButtons,
  handleApprove,
  handleDelete,
  handleDetail,
};


